"""
Django settings for expert_system project.

Generated by 'django-admin startproject' using Django 5.1.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
import os
import sys

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Check for vendor directory and add it to path if exists
vendor_path = os.path.join(BASE_DIR, "vendor")
if os.path.exists(vendor_path) and vendor_path not in sys.path:
    sys.path.insert(0, vendor_path)
    print(f"Added vendor directory to path: {vendor_path}")

# Explicitly check for JWT package
try:
    import rest_framework_simplejwt
    print("Successfully imported rest_framework_simplejwt")
except ImportError as e:
    print(f"Error importing rest_framework_simplejwt: {e}")
    try:
        import subprocess
        print("Attempting to install JWT packages...")
        subprocess.check_call([sys.executable, "-m", "pip", "install", "djangorestframework-simplejwt==5.3.1", "PyJWT==2.8.0"])
        import rest_framework_simplejwt
        print("Successfully installed and imported rest_framework_simplejwt")
    except Exception as e:
        print(f"Failed to install JWT packages: {e}")
        raise

# Ensuring PyJWT is also available
try:
    import jwt
    print("Successfully imported PyJWT")
except ImportError as e:
    print(f"Error importing PyJWT: {e}")
    raise

# Load environment variables
from dotenv import load_dotenv

# Load .env file from project root
env_path = os.path.join(BASE_DIR.parent, '.env')
load_dotenv(env_path)

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# For deployment, set this with an environment variable
SECRET_KEY = os.getenv('DJANGO_SECRET_KEY')
if not SECRET_KEY:
    # Generate a random key for development only
    import secrets
    SECRET_KEY = secrets.token_urlsafe(50)
    print("WARNING: Using auto-generated SECRET_KEY. Set DJANGO_SECRET_KEY env variable in production.")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv('DJANGO_DEBUG', 'True') == 'True'

ALLOWED_HOSTS = ["*"]

# Security Settings - Disabled for Railway deployment
# These should be re-enabled in a production environment with proper SSL
SECURE_SSL_REDIRECT = False  # Disabled for Railway
SESSION_COOKIE_SECURE = False  # Disabled for Railway
CSRF_COOKIE_SECURE = False  # Disabled for Railway
SECURE_BROWSER_XSS_FILTER = True
SECURE_CONTENT_TYPE_NOSNIFF = True
X_FRAME_OPTIONS = 'DENY'


# Application definition

INSTALLED_APPS = [
    # Built-in apps
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    
    # Third-party apps - put these before our apps
    "corsheaders",
    "rest_framework",
    "rest_framework_simplejwt",
    
    # Our apps
    "api",
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    'django.middleware.common.CommonMiddleware',
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "expert_system.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "expert_system.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = "static/"

# Media files (User uploads)
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# REST Framework settings
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
    'DEFAULT_THROTTLE_CLASSES': [
        # Temporarily disable throttling to fix expert loading issues
        # 'rest_framework.throttling.AnonRateThrottle',
        # 'rest_framework.throttling.UserRateThrottle',
    ],
    'DEFAULT_THROTTLE_RATES': {
        'anon': '1000/day',
        'user': '10000/day',
    }
}

# JWT settings
from datetime import timedelta
SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=60),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),
    'ROTATE_REFRESH_TOKENS': True,
    'BLACKLIST_AFTER_ROTATION': True,
    'USER_ID_FIELD': 'id',
    'USER_ID_CLAIM': 'user_id',
    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
    'TOKEN_TYPE_CLAIM': 'token_type',
    'JTI_CLAIM': 'jti',
    'ALGORITHM': 'HS256',
    'SIGNING_KEY': SECRET_KEY,
    'VERIFYING_KEY': None,
    'AUDIENCE': None,
    'ISSUER': None,
}

# CORS settings
CORS_ALLOW_ALL_ORIGINS = True  # This must come first to take precedence
CORS_ALLOW_CREDENTIALS = True

CORS_ALLOWED_ORIGINS = [
    "http://127.0.0.1:5173",
    "http://localhost:5173",
    "http://127.0.0.1:5174",
    "http://localhost:5174",
    "http://127.0.0.1:5175",
    "http://localhost:5175",
    "http://127.0.0.1:5176",
    "http://localhost:5176",
    "http://127.0.0.1:5177",
    "http://localhost:5177",
    "http://127.0.0.1:5178",
    "http://localhost:5178",
    "http://127.0.0.1:5179",
    "http://localhost:5179",
    "http://127.0.0.1:5180",
    "http://localhost:5180",
    "http://127.0.0.1:5181",
    "http://localhost:5181",
    "http://127.0.0.1:5182",
    "http://localhost:5182",
    "http://127.0.0.1:5183",
    "http://localhost:5183",
    "http://127.0.0.1:5184",
    "http://localhost:5184",
    "http://127.0.0.1:5185",
    "http://localhost:5185",
    "http://127.0.0.1:5186",
    "http://localhost:5186",
    "http://127.0.0.1:5187",
    "http://localhost:5187",
    "http://127.0.0.1:5188",
    "http://localhost:5188",
    "http://127.0.0.1:5189",
    "http://localhost:5189",
    "http://127.0.0.1:5190",
    "http://localhost:5190",
]
CORS_ALLOW_METHODS = [
    'DELETE',
    'GET',
    'OPTIONS',
    'PATCH',
    'POST',
    'PUT',
]
CORS_ALLOW_HEADERS = [
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
    'cache-control',
    'pragma',
    'access-control-allow-origin',
]
CORS_EXPOSE_HEADERS = [
    'content-type', 
    'authorization',
    'cache-control',
    'pragma',
]

# CSRF settings
CSRF_TRUSTED_ORIGINS = [
    "http://localhost:5173",  # Vite dev server
    "http://localhost:5174",
    "http://localhost:5175",
    "http://localhost:5176",
    "http://localhost:5177",
    "http://localhost:5178",
    "http://localhost:5179",
    "http://localhost:5180",
    "http://localhost:5181",
    "http://localhost:5182",
    "http://localhost:5183",
    "http://localhost:5184",
    "http://localhost:5185",
]
CSRF_COOKIE_SAMESITE = 'Lax'
CSRF_COOKIE_HTTPONLY = False  # Allow JavaScript access to CSRF token

# API Keys with validation
OPENAI_API_KEY = os.getenv('OPENAI_API_KEY')
if not OPENAI_API_KEY and not DEBUG:
    # Only raise error in production
    raise ValueError("OPENAI_API_KEY must be set in environment variables")
elif not OPENAI_API_KEY:
    # Use a placeholder in development
    print("WARNING: Using placeholder OPENAI_API_KEY for development")
    OPENAI_API_KEY = "sk-placeholder-key-for-development"

PINECONE_API_KEY = os.getenv('PINECONE_API_KEY')
if not PINECONE_API_KEY and not DEBUG:
    # Only raise error in production
    raise ValueError("PINECONE_API_KEY must be set in environment variables")
elif not PINECONE_API_KEY:
    # Use a placeholder in development
    print("WARNING: Using placeholder PINECONE_API_KEY for development")
    PINECONE_API_KEY = "placeholder-key-for-development"

# Logging Configuration
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
        },
    },
    'root': {
        'handlers': ['console'],
        'level': 'INFO',
    },
    'loggers': {
        'api': {
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': False,
        },
    },
}

# After successful login, redirect to the expert form
LOGIN_REDIRECT_URL = '/api/expert-form/'

# Custom user model
AUTH_USER_MODEL = 'api.Expert'

# Frontend URL for email verification
FRONTEND_URL = 'http://127.0.0.1:5175'

# Email settings
EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'  # For development
DEFAULT_FROM_EMAIL = 'experta@example.com'
