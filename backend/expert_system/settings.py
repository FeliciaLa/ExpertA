"""
Django settings for expert_system project.

Generated by 'django-admin startproject' using Django 5.1.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

import os
import sys
from pathlib import Path
from datetime import timedelta

# Check if running on Railway
ON_RAILWAY = os.environ.get('RAILWAY_STATIC_URL', '') != ''
if ON_RAILWAY:
    print("Running on Railway - using simplified authentication")

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Load environment variables
try:
    from dotenv import load_dotenv
    env_path = os.path.join(BASE_DIR.parent, '.env')
    load_dotenv(env_path)
    print("Loaded environment variables from .env file")
except ImportError:
    print("python-dotenv not installed, skipping .env loading")

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# For deployment, set this with an environment variable
SECRET_KEY = os.getenv('DJANGO_SECRET_KEY')
if not SECRET_KEY:
    # Generate a random key for development only
    import secrets
    SECRET_KEY = secrets.token_urlsafe(50)
    print("WARNING: Using auto-generated SECRET_KEY. Set DJANGO_SECRET_KEY env variable in production.")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True  # Temporarily set to True for debugging

ALLOWED_HOSTS = [
    "experta-production.up.railway.app",
    "*.up.railway.app",  # Allow all Railway subdomains
    "experta-backend-d64920064058.herokuapp.com",  # Heroku domain
    "*.herokuapp.com",  # Allow all Heroku subdomains
    "localhost",
    "127.0.0.1",
    "*"  # Allow all hosts for debugging (remove in production)
]

# Security Settings - Disabled for Railway deployment
# These should be re-enabled in a production environment with proper SSL
SECURE_SSL_REDIRECT = False  # Disabled for Railway
SESSION_COOKIE_SECURE = False  # Disabled for Railway
CSRF_COOKIE_SECURE = False  # Disabled for Railway
SECURE_BROWSER_XSS_FILTER = True
SECURE_CONTENT_TYPE_NOSNIFF = True
X_FRAME_OPTIONS = 'DENY'


# Application definition

INSTALLED_APPS = [
    # Built-in apps
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    
    # Third-party apps
    "corsheaders",
    "rest_framework",
    
    # Our apps
    "api",
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',  # CORS middleware must be at the top
    'django.middleware.common.CommonMiddleware',  # This should come right after CORS
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",  # Add WhiteNoise middleware for static files
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "expert_system.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "expert_system.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

# Configure database based on environment
if os.getenv('DATABASE_URL'):
    # Using Railway's DATABASE_URL
    import dj_database_url
    DATABASES = {
        'default': dj_database_url.config(
            default=os.getenv('DATABASE_URL'),
            conn_max_age=600,
            conn_health_checks=True,
        )
    }
    print("Using PostgreSQL from DATABASE_URL")
elif os.getenv('DB_HOST'):
    # Using custom PostgreSQL configuration
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': os.getenv('DB_NAME', 'experta'),
            'USER': os.getenv('DB_USER', 'postgres'),
            'PASSWORD': os.getenv('DB_PASSWORD', ''),
            'HOST': os.getenv('DB_HOST', 'localhost'),
            'PORT': os.getenv('DB_PORT', '5432'),
        }
    }
    print("Using custom PostgreSQL configuration")
else:
    # Default SQLite for development
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.sqlite3",
            "NAME": BASE_DIR / "db.sqlite3",
        }
    }
    print("Using SQLite for development")


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = "static/"
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

# Enable WhiteNoise compression and caching (now configured in STORAGES setting)

# AWS S3 Configuration
USE_S3 = os.getenv('USE_S3', 'False').lower() == 'true'

if USE_S3:
    # AWS S3 settings
    AWS_ACCESS_KEY_ID = os.getenv('AWS_ACCESS_KEY_ID')
    AWS_SECRET_ACCESS_KEY = os.getenv('AWS_SECRET_ACCESS_KEY')
    AWS_STORAGE_BUCKET_NAME = os.getenv('AWS_STORAGE_BUCKET_NAME')
    AWS_S3_REGION_NAME = os.getenv('AWS_S3_REGION_NAME', 'us-east-1')
    AWS_S3_CUSTOM_DOMAIN = f'{AWS_STORAGE_BUCKET_NAME}.s3.amazonaws.com'
    AWS_DEFAULT_ACL = 'public-read'
    AWS_S3_OBJECT_PARAMETERS = {
        'CacheControl': 'max-age=86400',
    }
    AWS_LOCATION = 'media'
    
    # Configure Django 4.2+ STORAGES setting for S3
    STORAGES = {
        "default": {
            "BACKEND": "storages.backends.s3boto3.S3Boto3Storage",
        },
        "staticfiles": {
            "BACKEND": "whitenoise.storage.CompressedManifestStaticFilesStorage",
        },
    }
    
    # S3 Media URL
    MEDIA_URL = f'https://{AWS_S3_CUSTOM_DOMAIN}/{AWS_LOCATION}/'
else:
    # Local media files (for development)
    MEDIA_URL = '/media/'
    MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
    
    # Local storage configuration
    STORAGES = {
        "default": {
            "BACKEND": "django.core.files.storage.FileSystemStorage",
        },
        "staticfiles": {
            "BACKEND": "whitenoise.storage.CompressedManifestStaticFilesStorage",
        },
    }

# File upload limits
FILE_UPLOAD_MAX_MEMORY_SIZE = 10 * 1024 * 1024  # 10 MB
DATA_UPLOAD_MAX_MEMORY_SIZE = 10 * 1024 * 1024  # 10 MB

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# REST Framework settings
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework_simplejwt.authentication.JWTAuthentication',
        'rest_framework.authentication.SessionAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.AllowAny',
    ],
    'DEFAULT_RENDERER_CLASSES': [
        'rest_framework.renderers.JSONRenderer',
    ],
    'DEFAULT_PARSER_CLASSES': [
        'rest_framework.parsers.JSONParser',
        'rest_framework.parsers.MultiPartParser',
        'rest_framework.parsers.FormParser',
    ],
    'EXCEPTION_HANDLER': 'api.utils.custom_exception_handler',
}

# CORS settings - temporarily allow all origins for debugging
CORS_ALLOW_ALL_ORIGINS = True  # Re-enable to debug the issue
CORS_ALLOW_CREDENTIALS = True

# Enable specific origins - be explicit about what we allow
CORS_ALLOWED_ORIGINS = [
    # Local development
    "http://localhost:5173",
    "http://localhost:5174",
    "http://localhost:5175",
    "http://localhost:5176",
    "http://localhost:5177",
    "http://localhost:5178",
    "http://localhost:5179",
    "http://localhost:5180",
    # Vercel domains - exact match
    "https://expert-a.vercel.app",
    "https://expert-a-git-main.vercel.app", 
    "https://expert-a-feliciala.vercel.app",
    # Vercel preview deployments - add wildcard
    "https://expert-42lkksco4-felicia-lammertings-projects.vercel.app",
    "https://expert-h0m39zhmz-felicia-lammertings-projects.vercel.app",
    "https://expert-rm7gqywrd-felicia-lammertings-projects.vercel.app",
    "https://expert-pkkeaorxs-felicia-lammertings-projects.vercel.app",
    "https://expert-bpjnvsb43-felicia-lammertings-projects.vercel.app",
    "https://expert-pml6epi00-felicia-lammertings-projects.vercel.app",
    "https://expert-8vgetbh4z-felicia-lammertings-projects.vercel.app",
    "https://expert-4weyavifq-felicia-lammertings-projects.vercel.app",
]

# Also use regex for Vercel preview URLs
CORS_ALLOWED_ORIGIN_REGEXES = [
    r"^https://expert-[a-z0-9]+\.vercel\.app$",
    r"^https://expert-[a-z0-9]+-[a-z0-9]+-felicia-lammertings-projects\.vercel\.app$",
]

CORS_ALLOW_METHODS = [
    'DELETE',
    'GET',
    'OPTIONS',
    'PATCH',
    'POST',
    'PUT',
]
CORS_ALLOW_HEADERS = [
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
    'cache-control',
    'pragma',
    'access-control-allow-origin',
]
CORS_EXPOSE_HEADERS = [
    'content-type', 
    'authorization',
    'cache-control',
    'pragma',
]

# CSRF settings
CSRF_TRUSTED_ORIGINS = [
    # Local development
    "http://localhost:5173",  # Vite dev server
    "http://localhost:5174",
    "http://localhost:5175",
    "http://localhost:5176",
    "http://localhost:5177",
    "http://localhost:5178",
    "http://localhost:5179",
    "http://localhost:5180",
    # Vercel domains
    "https://expert-a.vercel.app",
    "https://expert-a-git-main.vercel.app",
    "https://expert-a-feliciala.vercel.app",
    "https://*.vercel.app",  # Wildcard to cover all Vercel subdomains
    # Add your custom Vercel domain once you have it
]
CSRF_COOKIE_SAMESITE = 'Lax'
CSRF_COOKIE_HTTPONLY = False  # Allow JavaScript access to CSRF token

# API Keys with validation - simplified for Railway
OPENAI_API_KEY = os.getenv('OPENAI_API_KEY', 'placeholder-key')
PINECONE_API_KEY = os.getenv('PINECONE_API_KEY', 'placeholder-key')

# Logging Configuration
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
        },
    },
    'root': {
        'handlers': ['console'],
        'level': 'INFO',
    },
    'loggers': {
        'api': {
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': False,
        },
    },
}

# After successful login, redirect to the expert form
LOGIN_REDIRECT_URL = '/api/expert-form/'

# Custom user model
AUTH_USER_MODEL = 'api.User'

# Frontend URL for email verification
FRONTEND_URL = os.getenv('FRONTEND_URL', 'https://expert-a.vercel.app')

# Email settings
EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'  # For development
DEFAULT_FROM_EMAIL = os.getenv('DEFAULT_FROM_EMAIL', 'experta@example.com')

# Production email settings (used when EMAIL_HOST_USER is set)
if os.getenv('EMAIL_HOST_USER'):
    EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
    EMAIL_HOST = 'smtp.gmail.com'
    EMAIL_PORT = 587
    EMAIL_USE_TLS = True
    EMAIL_HOST_USER = os.getenv('EMAIL_HOST_USER')
    EMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD')
    print("Using SMTP email backend for production")

# JWT settings 
SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(days=1),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=7),
    'ROTATE_REFRESH_TOKENS': True,
    'BLACKLIST_AFTER_ROTATION': True,
    'ALGORITHM': 'HS256',
    'SIGNING_KEY': SECRET_KEY,
    'VERIFYING_KEY': None,
    'AUTH_HEADER_TYPES': ('Bearer',),
    'USER_ID_FIELD': 'id',
    'USER_ID_CLAIM': 'user_id',
    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
    'TOKEN_TYPE_CLAIM': 'token_type',
    'JTI_CLAIM': 'jti',
}
