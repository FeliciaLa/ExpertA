# Generated by Django 5.1.3 on 2025-06-17 09:25

import api.models
import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="OnboardingQuestion",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("question_text", models.TextField()),
                ("order", models.IntegerField(unique=True)),
                ("category", models.CharField(max_length=50)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("is_active", models.BooleanField(default=True)),
            ],
            options={
                "db_table": "onboarding_questions",
                "ordering": ["order"],
            },
        ),
        migrations.CreateModel(
            name="User",
            fields=[
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("email", models.EmailField(max_length=255, unique=True)),
                ("name", models.CharField(max_length=255)),
                ("slug", models.SlugField(blank=True, max_length=100, unique=True)),
                ("date_joined", models.DateTimeField(auto_now_add=True)),
                ("is_active", models.BooleanField(default=False)),
                ("is_staff", models.BooleanField(default=False)),
                ("is_superuser", models.BooleanField(default=False)),
                (
                    "role",
                    models.CharField(
                        choices=[
                            ("admin", "Administrator"),
                            ("expert", "Expert"),
                            ("user", "User"),
                        ],
                        default="user",
                        max_length=20,
                    ),
                ),
                ("bio", models.TextField(blank=True)),
                ("specialties", models.TextField(blank=True)),
                ("title", models.CharField(blank=True, max_length=100)),
                ("onboarding_completed", models.BooleanField(default=False)),
                (
                    "onboarding_completed_at",
                    models.DateTimeField(blank=True, null=True),
                ),
                (
                    "profile_image",
                    models.ImageField(
                        blank=True, null=True, upload_to="profile_images/"
                    ),
                ),
                ("total_training_messages", models.IntegerField(default=0)),
                ("last_training_at", models.DateTimeField(blank=True, null=True)),
                (
                    "verification_token",
                    models.CharField(blank=True, max_length=100, null=True),
                ),
                (
                    "verification_token_created_at",
                    models.DateTimeField(blank=True, null=True),
                ),
                (
                    "pending_email",
                    models.EmailField(blank=True, max_length=254, null=True),
                ),
                (
                    "email_change_token",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                (
                    "email_change_token_created_at",
                    models.DateTimeField(blank=True, null=True),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "User",
                "verbose_name_plural": "Users",
            },
        ),
        migrations.CreateModel(
            name="ConsultationSession",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("expert_name", models.CharField(max_length=255)),
                ("expert_industry", models.CharField(blank=True, max_length=100)),
                ("expert_specialty", models.CharField(blank=True, max_length=100)),
                ("started_at", models.DateTimeField(auto_now_add=True)),
                ("ended_at", models.DateTimeField(blank=True, null=True)),
                ("total_messages", models.IntegerField(default=0)),
                ("duration_minutes", models.IntegerField(default=0)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("active", "Active"),
                            ("completed", "Completed"),
                            ("abandoned", "Abandoned"),
                        ],
                        default="active",
                        max_length=20,
                    ),
                ),
                (
                    "expert",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="expert_consultations",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="consultations",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "consultation_sessions",
                "ordering": ["-started_at"],
            },
        ),
        migrations.CreateModel(
            name="Document",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("file", models.FileField(upload_to=api.models.document_upload_path)),
                ("filename", models.CharField(max_length=255)),
                ("file_size", models.IntegerField()),
                ("mime_type", models.CharField(max_length=100)),
                ("upload_date", models.DateTimeField(auto_now_add=True)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("processing", "Processing"),
                            ("completed", "Completed"),
                            ("failed", "Failed"),
                        ],
                        default="processing",
                        max_length=20,
                    ),
                ),
                ("error_message", models.TextField(blank=True, null=True)),
                ("knowledge_processed", models.BooleanField(default=False)),
                ("knowledge_processed_at", models.DateTimeField(blank=True, null=True)),
                (
                    "expert",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="documents",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "expert_documents",
                "ordering": ["-upload_date"],
            },
        ),
        migrations.CreateModel(
            name="ExpertKnowledgeBase",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("last_updated", models.DateTimeField(auto_now=True)),
                ("is_active", models.BooleanField(default=True)),
                ("knowledge_areas", models.JSONField(default=dict)),
                ("context_vectors", models.JSONField(default=dict)),
                ("training_summary", models.TextField(blank=True)),
                (
                    "expert",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="knowledge_base",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "expert_knowledge_bases",
            },
        ),
        migrations.CreateModel(
            name="ExpertProfile",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("industry", models.TextField()),
                ("years_of_experience", models.IntegerField()),
                ("key_skills", models.TextField()),
                ("typical_problems", models.TextField()),
                ("background", models.TextField()),
                ("certifications", models.TextField(blank=True)),
                ("methodologies", models.TextField(blank=True)),
                ("tools_technologies", models.TextField(blank=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "expert",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="profile",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "expert_profiles",
            },
        ),
        migrations.CreateModel(
            name="TrainingMessage",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("role", models.CharField(max_length=10)),
                ("content", models.TextField()),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("context_depth", models.IntegerField(default=1)),
                ("knowledge_area", models.CharField(blank=True, max_length=100)),
                ("knowledge_processed", models.BooleanField(default=False)),
                ("knowledge_processed_at", models.DateTimeField(blank=True, null=True)),
                (
                    "expert",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="training_messages",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["created_at"],
            },
        ),
        migrations.CreateModel(
            name="KnowledgeEntry",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("topic", models.CharField(max_length=100)),
                ("content", models.TextField()),
                ("context_depth", models.IntegerField(default=1)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("last_accessed", models.DateTimeField(auto_now=True)),
                ("confidence_score", models.FloatField(default=1.0)),
                (
                    "knowledge_base",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="entries",
                        to="api.expertknowledgebase",
                    ),
                ),
                (
                    "source_message",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="api.trainingmessage",
                    ),
                ),
            ],
            options={
                "ordering": ["-confidence_score", "-last_accessed"],
            },
        ),
        migrations.CreateModel(
            name="TrainingSession",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("expertise", models.CharField(max_length=255)),
                (
                    "phase",
                    models.CharField(
                        choices=[("initial", "Initial"), ("specific", "Specific")],
                        max_length=20,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("completed_at", models.DateTimeField(blank=True, null=True)),
                (
                    "expert",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="training_sessions",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "training_sessions",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="TrainingAnswer",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("question_id", models.CharField(max_length=100)),
                ("question_text", models.TextField()),
                ("answer", models.TextField()),
                ("question_number", models.IntegerField()),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "session",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="answers",
                        to="api.trainingsession",
                    ),
                ),
            ],
            options={
                "db_table": "training_answers",
                "ordering": ["question_number"],
            },
        ),
        migrations.CreateModel(
            name="OnboardingAnswer",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("answer", models.TextField()),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "expert",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="onboarding_answers",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "question",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="api.onboardingquestion",
                    ),
                ),
            ],
            options={
                "db_table": "onboarding_answers",
                "ordering": ["question__order"],
                "unique_together": {("expert", "question")},
            },
        ),
    ]
