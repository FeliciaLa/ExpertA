# Generated by Django 5.1.3 on 2025-06-06 09:30

from django.db import migrations


def fix_admin_log_table(apps, schema_editor):
    """Fix django_admin_log table to use UUID for user_id field"""
    
    with schema_editor.connection.cursor() as cursor:
        try:
            # First, clear all admin log entries
            cursor.execute("DELETE FROM django_admin_log;")
            
            # Drop the foreign key constraint if it exists
            cursor.execute("""
                SELECT constraint_name 
                FROM information_schema.table_constraints 
                WHERE table_name = 'django_admin_log' 
                AND constraint_type = 'FOREIGN KEY'
                AND constraint_name LIKE '%user_id%';
            """)
            
            constraint_result = cursor.fetchone()
            if constraint_result:
                constraint_name = constraint_result[0]
                cursor.execute(f"ALTER TABLE django_admin_log DROP CONSTRAINT {constraint_name};")
            
            # Change the user_id column type to UUID
            cursor.execute("ALTER TABLE django_admin_log ALTER COLUMN user_id TYPE uuid USING user_id::text::uuid;")
            
            # Recreate the foreign key constraint to api_user table
            cursor.execute("""
                ALTER TABLE django_admin_log 
                ADD CONSTRAINT django_admin_log_user_id_fkey 
                FOREIGN KEY (user_id) REFERENCES api_user(id) DEFERRABLE INITIALLY DEFERRED;
            """)
            
            print("Successfully fixed django_admin_log table structure")
            
        except Exception as e:
            print(f"Error fixing admin log table: {e}")
            # Don't fail if this doesn't work - we can live without admin logs


def reverse_fix_admin_log_table(apps, schema_editor):
    """Reverse migration - change back to bigint (though this might not work perfectly)"""
    
    with schema_editor.connection.cursor() as cursor:
        try:
            # Clear admin logs
            cursor.execute("DELETE FROM django_admin_log;")
            
            # Drop foreign key constraint
            cursor.execute("ALTER TABLE django_admin_log DROP CONSTRAINT IF EXISTS django_admin_log_user_id_fkey;")
            
            # Change back to bigint (this may not work if there are UUID values)
            cursor.execute("ALTER TABLE django_admin_log ALTER COLUMN user_id TYPE bigint USING user_id::text::bigint;")
            
        except Exception as e:
            print(f"Error reversing admin log table fix: {e}")


class Migration(migrations.Migration):

    dependencies = [
        ('api', '0018_fix_admin_logs_for_uuid'),
    ]

    operations = [
        migrations.RunPython(fix_admin_log_table, reverse_fix_admin_log_table),
    ] 